CREATE TABLE IF NOT EXISTS users (
  user_name varchar(100),
  password varchar(50),
  mode varchar(20),
  PRIMARY KEY (user_name)
);

CREATE TABLE IF NOT EXISTS store (
  store_name varchar(30),
  address_line1 text,
  address_line2 text,
  PRIMARY KEY (store_name)
);

CREATE TABLE IF NOT EXISTS train (
  train_id int ,
  train_capacity numeric(5,2),
  PRIMARY KEY (train_id)
);

CREATE TABLE IF NOT EXISTS train_schedule (
  train_session_id int NOT NULL AUTO_INCREMENT,
  train_id int,
  departure_time time,
  departure_date date,
  available_capacity numeric(5,2),
  PRIMARY KEY (train_session_id),
  FOREIGN KEY (train_id) REFERENCES train(train_id)
);

CREATE TABLE IF NOT EXISTS arrival_station (
  train_session_id int ,
  arrival_station varchar(30) ,
  arrival_time time,
  PRIMARY KEY (train_session_id, arrival_station),
  FOREIGN KEY (train_session_id) REFERENCES train_schedule(train_session_id),
  FOREIGN KEY (arrival_station) REFERENCES store(store_name)
);

CREATE TABLE IF NOT EXISTS customer_type (
  customer_type varchar(10),
  discount_rate numeric(3,2),
  min_number_of_items int,
  PRIMARY KEY (customer_type)
);

CREATE TABLE IF NOT EXISTS customer (
  customer_id int AUTO_INCREMENT,
  name varchar(50),
  address_number text,
  address_line_1 text,
  address_line_2 text,
  contact_number varchar(20),
  customer_type varchar(10),
  user_name varchar(100) UNIQUE NOT NULL,
  PRIMARY KEY (customer_id),
  FOREIGN KEY (customer_type) REFERENCES customer_type(customer_type),
  FOREIGN KEY (user_name) REFERENCES users(user_name)
);

CREATE TABLE IF NOT EXISTS route (
  route_id int ,
  store_name varchar(30),
  time_taken numeric(3,2),
  PRIMARY KEY (route_id),
  FOREIGN KEY (store_name) REFERENCES store(store_name)
);

CREATE TABLE IF NOT EXISTS order_table (
  order_id int NOT NULL AUTO_INCREMENT,
  customer_id int,
  number_of_items int,
  order_date date,
  order_time time,
  total_price numeric(10,2),
  discount numeric(10,2),
  total_capacity numeric(5,2),
  route_id int,
  delivery_state varchar(10),
  address_number text,
  address_line_1 text,
  address_line_2 text,
  PRIMARY KEY (order_id),
  FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
  FOREIGN KEY (route_id) REFERENCES route(route_id)
);

CREATE TABLE IF NOT EXISTS driver (
  driver_id int NOT NULL AUTO_INCREMENT,
  driver_name varchar(50),
  NIC varchar(15),
  address_line1 text,
  address_line2 text,
  PRIMARY KEY (driver_id)
);

CREATE TABLE IF NOT EXISTS truck (
  truck_id int NOT NULL AUTO_INCREMENT,
  truck_capacity numeric(5,2),
  used_hours numeric(8,2),
  PRIMARY KEY (truck_id)
);

CREATE TABLE IF NOT EXISTS driver_assistant (
  driver_assistant_id int NOT NULL AUTO_INCREMENT,
  driver_assistant_name varchar(50),
  NIC varchar(15),
  address_line1 text,
  address_line2 text,
  PRIMARY KEY (driver_assistant_id)
);

CREATE TABLE IF NOT EXISTS truck_schedule (
  truck_session_id int NOT NULL AUTO_INCREMENT,
  truck_id int,
  driver_id int,
  driver_assistant_id int,
  route_id int,
  departure_date date,
  departure_time time,
  arrival_date date,
  arrival_time time,
  PRIMARY KEY (truck_session_id),
  FOREIGN KEY (route_id) REFERENCES route(route_id),
  FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
  FOREIGN KEY (truck_id) REFERENCES truck(truck_id) ON DELETE CASCASE,
  FOREIGN KEY (driver_assistant_id) REFERENCES driver_assistant(driver_assistant_id)
);


CREATE TABLE IF NOT EXISTS order_truck_schedule (
  order_id int,
  truck_session_id int,
  PRIMARY KEY (order_id, truck_session_id),
  FOREIGN KEY (truck_session_id) REFERENCES truck_schedule(truck_session_id),
  FOREIGN KEY (order_id) REFERENCES order_table(order_id)
);



CREATE TABLE IF NOT EXISTS order_train_schedule (
  order_id int,
  train_session_id int,
  PRIMARY KEY (order_id, train_session_id),
  FOREIGN KEY (train_session_id) REFERENCES train_schedule(train_session_id),
  FOREIGN KEY (order_id) REFERENCES order_table(order_id)
);

CREATE TABLE IF NOT EXISTS items (
  item_id int NOT NULL AUTO_INCREMENT,
  item_name varchar(30),
  capacity numeric(4,2),
  price numeric(8,2),
  description text,
  PRIMARY KEY (item_id)
);

CREATE TABLE IF NOT EXISTS cart (
  customer_id int ,
  item_id int,
  item_quantity int,
  PRIMARY KEY (customer_id, item_id),
  FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
  FOREIGN KEY (item_id) REFERENCES items(item_id)
);



CREATE TABLE IF NOT EXISTS order_items (
  order_id int NOT NULL AUTO_INCREMENT,
  item_id int,
  order_items_quantity int,
  PRIMARY KEY (order_id, item_id),
  FOREIGN KEY (order_id) REFERENCES order_table(order_id),
  FOREIGN KEY (item_id) REFERENCES items(item_id)
);


CREATE TABLE IF NOT EXISTS store_manager (
  manager_id int,
  name varchar(50),
  user_name varchar(100) NOT NULL UNIQUE ,
  NIC varchar(15),
  telephone_no varchar(20),
  store varchar(30),
  PRIMARY KEY (manager_id),
  FOREIGN KEY (user_name) REFERENCES users(user_name),
  FOREIGN KEY (store) REFERENCES store(store_name)
);

CREATE TABLE IF NOT EXISTS main_manager (
  manager_id int,
  name varchar(50),
  user_name varchar(100) NOT NULL UNIQUE,
  NIC varchar(15),
  telephone_no varchar(20),
  PRIMARY KEY (manager_id),
  FOREIGN KEY (user_name) REFERENCES users(user_name)
);





DELIMITER //
CREATE procedure InsertSampleRecords ( )
BEGIN
    Insert into customer_type values('end',0.0,1);
    Insert into customer_type values('ret',0.2,3);
    Insert into customer_type values('whole',0.3,6);

    Insert into users values('nuwan@gmail.com',1234,'Main_manager'),
    ('shamindi@gmail.com',1111,'store_manager'),
    ('raveesha@gmail.com',1111,'customer'),
    ('kavindi@gmail.com',1111,'customer'),
    ('saman@gmail.com',1111,'customer');


    Insert into customer values ('1001','Nuwan','567','Rajagiriya','Colombo',0773621843,'end','nuwan@gmail.com'),
    ('1002','Shamindi','457','Miriswaththa','Matara',0773436542,'end','shamindi@gmail.com'),
    ('1003','Raveesha','743','Balummaha','Galle',0773436542,'whole','raveesha@gmail.com'),
    ('1004','Kavindi','493','BandaranayakaMawatha','Galle',0773840754,'whole','kavindi@gmail.com'),
    ('1005','Saman','573','MoleRoad','Jaffna',0778753542,'ret','saman@gmail.com');


    insert into items values ('201','Coffee Maker','1.6','7000','Mr. Coffee Coffee Maker with Auto Pause and Glass Carafe, 12 Cups, Black');
    insert into items values ('202','Rice Cooker','2.1','1800','6-Cup (Uncooked) Micom Rice Cooker | 12 Menu Options: White Rice, Brown Rice & More, Nonstick Inner Pot');
    insert into items values ('203','Electric Kettle','1.6','7000','1500W Electric Kettle with SpeedBoil Tech, 1.8 Liter Cordless with LED Light, Borosilicate Glass, Auto Shut-Off and Boil-Dry Protection');
    insert into items values ('204','Oven','3','40000','Bravo Air Fryer Oven , 12-in-1, 30QT XL Large Capacity Digital Countertop Convection Oven');
    insert into items values ('205','Electric Fan','2.5','10000','Small Room Air Circulator Fan, 11-Inch');


    insert into truck(truck_id,truck_capacity,used_hours) values (801,100,20000);
    insert into truck(truck_id,truck_capacity,used_hours) values (802,100,25000);
    insert into truck(truck_id,truck_capacity,used_hours) values (803,100,23000);
    insert into truck(truck_id,truck_capacity,used_hours) values (804,100,22000);
    insert into truck(truck_id,truck_capacity,used_hours) values (805,100,24000);

    insert into driver(driver_id,driver_name,NIC,address_line1,address_line2)
    values('0000000001','sasindu','200008400671','245, temple road','thissamaharama,sri lanka');
    insert into driver(driver_id,driver_name,NIC,address_line1,address_line2)
    values('0000000002','bimal','202343240676','45, molpe road','katubedda,sri lanka');
    insert into driver(driver_id,driver_name,NIC,address_line1,address_line2)
    values('0000000003','amal','208785700673','235, piyatissa road','maharagama,sri lanka');
    insert into driver_assistant(driver_assistant_id,driver_assistant_name,NIC,address_line1,address_line2)
    values('0000000001','ama','20004545456','285, rajapakse road','maharagama,sri lanka');
    insert into driver_assistant(driver_assistant_id,driver_assistant_name,NIC,address_line1,address_line2)
    values('0000000002','shamindi','208785700673','115, piyatissa road','nugegoda,sri lanka');
    insert into driver_assistant(driver_assistant_id,driver_assistant_name,NIC,address_line1,address_line2)
    values('0000000003','chinathani','200018400870','5, molpe road','gampaha,sri lanka');

    insert into store values('Colombo','1','Colombo');
    insert into store values('Negombo','10','Negombo');
    insert into store values('Galle','43','Galle');
    insert into store values('Matara','32','Matara');
    insert into store values('Jaffna','23','Jaffna');
    insert into store values('Trinco','14','Trinco');


    Insert into route(store_name,route_id,time_taken) values ('Colombo','601','5'),
    ('Colombo','602','7.5'),
    ('Negombo','603','4'),
    ('Negombo','604','6'),
    ('Galle','605','8'),
    ('Galle','606','3.5'),
    ('Matara','607','5'),
    ('Matara','608','8'),
    ('Jaffna','609','6'),
    ('Jaffna','610','7');


    insert into truck_schedule(truck_session_id,truck_id,driver_id,driver_assistant_id,route_id,departure_date,
    departure_time,arrival_date,arrival_time) values('0000000001','801','0000000001',
    '0000000001','602','2022-11-25','15:50:00','2022-12-23','05:50:00');
    insert into truck_schedule(truck_session_id,truck_id,driver_id,driver_assistant_id,route_id,departure_date,
    departure_time,arrival_date,arrival_time) values('0000000002','802','0000000002',
    '0000000003','603','2022-11-26','15:50:00','2022-12-23','03:50:00');
    insert into truck_schedule(truck_session_id,truck_id,driver_id,driver_assistant_id,route_id,departure_date,
    departure_time,arrival_date,arrival_time) values('0000000003','803','0000000003',
    '0000000002','604','2022-11-27','15:50:00','2022-12-23','13:50:00');
    insert into truck_schedule(truck_session_id,truck_id,driver_id,driver_assistant_id,route_id,departure_date,
    departure_time,arrival_date,arrival_time) values('0000000004','804','0000000001',
    '0000000001','605','2023-01-28','15:50:00','2023-02-23','06:50:00');

    insert into train values ("1010",100);
    insert into train values("1044",150);
    insert into train values("1056",200);
    insert into train values("2001",100);
    insert into train values("1003",200);

    insert into train_schedule values('8010','1010','08:00','2022-11-25',100);
    insert into train_schedule values('8011','1044','09:00','2022-11-26',150);
    insert into train_schedule values('8012','1056','10:00','2022-11-27',200);
    insert into train_schedule values('8014','2001','10:00','2022-11-28',100);
    insert into train_schedule values ('8015','1003','09:00','2022-11-29',200);

END //
DELIMITER ;





DELIMITER //
CREATE procedure InsertItem ( IN item_name varchar(30) , IN capacity numeric(4,2) , IN price numeric(8,2),IN descriptions TEXT )
BEGIN
	insert into items(item_name,capacity,price,description) values (item_name,capacity,price,descriptions);
END //
DELIMITER ;


DELIMITER //
CREATE procedure AddToCart (IN customerID int , IN itemID int , IN quantity int)
BEGIN
	insert into cart values (customerID, itemID , quantity);
END //
DELIMITER ;


DELIMITER //
CREATE procedure BuyCart ( IN customerID int , IN route_id int ,IN address_number TEXT, IN address_line_1 TEXT,IN address_line_2 TEXT)
BEGIN
	declare ItemCount int default 0;
	declare totalPrice DECIMAL(10,2) default 0;
	declare totalCapacity DECIMAL(5,2) default 0;
	declare NumOfItems int default 0;
	declare quantity int default 0;
	declare OrderDate date ;
	declare OrderTime time;
	declare itemID int;
    declare discount decimal(10,2) default 0;
	declare iTemp int default 0;
    declare OrderID int;

	select count(Item_id) into ItemCount from cart where customer_id = customerID;


    set OrderDate = current_date();
	set OrderTime = current_time() ;

	insert into order_table values (null, customerID ,null,OrderDate,OrderTime,null,null,null,route_id,'new',address_number,address_line_1,address_line_2);
    select order_id into OrderID from order_table where customer_id = customerID and order_date = OrderDate and order_time = OrderTime ;


	while ItemCount > 0 DO
		select item_id into itemID from cart where customer_id = customerID limit 1;
		select item_quantity into quantity from cart where customer_id = customerID and
		item_id = itemID;
		set NumOfItems = NumOfItems + quantity;
		set TotalPrice = TotalPrice + quantity * ( select price from items where item_id = itemID);
		set TotalCapacity = TotalCapacity + quantity * ( select capacity from items where item_id =
		itemID);
		insert into order_items values (OrderID,itemID,quantity);
		delete from cart where customer_id = customerID and item_id = itemID;
		set ItemCount = ItemCount -1;
	end while;

    call GetDiscount(totalPrice,customerID,@discount);
	select @discount into discount ;
    set totalPrice = totalPrice-discount;

    update order_table set number_of_items = NumOfItems , total_price = TotalPrice ,total_capacity = TotalCapacity , discount = discount where order_id = OrderID;


END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE GetDiscount (IN price int , IN customer_id int ,OUT discount numeric(10,2))
BEGIN
	declare discount_rate numeric(3,2);
	SELECT customer_type.discount_rate INTO discount_rate from customer_type ,
	customer where customer.customer_id = customer_id AND customer.customer_type =
	customer_type.customer_type ;
	set discount = price * discount_rate;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE OrderAssignToTrain (in orderID int , in train_sessionID int)
BEGIN
	declare order_capacity decimal(5,2);
	select total_capacity into order_capacity from order_table where order_id = orderID;
	update train_schedule set available_capacity = available_capacity - order_capacity where train_session_id = train_sessionID;
    update order_table set delivery_state = "InTrain" where order_id = orderID;
    insert into order_train_schedule values (orderID,train_sessionID);
END //
DELIMITER ;


delimiter //
create procedure DeleteFromCart(in input_id int, in item_id_in int)
begin
    delete from cart where customer_id=input_id and item_id=item_id_in;
end//
delimiter ;


delimiter //
create procedure DeleteQuantityFromCart(in input_id int ,in item_id_in int)
begin
    update cart
    set item_quantity=item_quantity-1 where
    customer_id=input_id and item_id=item_id_in;
end //
delimiter ;


delimiter //
create procedure RegisterCustomer(in customer_id int, in name varchar(50) ,in address_number varchar(10), in address_line_1 varchar(30), in address_line_2 varchar(30), in contact_number varchar(10), in customer_type varchar(10),in username varchar(100))
begin
    insert into customer (customer_id,name,address_number,address_line_1,address_line_2,contact_number,custormer_type,user_name ) values (customer_id,name,address_number,address_line_1,address_line_2,contact_number,customer_type,username);
end //
delimiter ;


DELIMITER //
CREATE procedure RemoveCustomer(in customerID varchar(30))
begin
    delete from customer where customer_id=customerID;
end //
delimiter ;


delimiter //
create procedure EditProfile(in customer_id_in int, in name_in  varchar(50) ,in address_number_in varchar(10), in address_line_1_in  varchar(30), in address_line_2_in varchar(30), in contact_number_in varchar(10), in customer_type_in varchar(10),in username_in varchar(100))
begin
    update customer
    set customer_id=customer_id_in,name=name_in,address_number=address_number_in,address_line_1=address_line_1_in,address_line_2=address_line_2_in,contact_number=contact_number_in,customer_type=customer_type_in,user_name=username_in where customer_id=customer_id_in;
end //
delimiter ;

delimiter //
create procedure AddDriver(in name varchar(50), in nicNO varchar(15),in address_line_1 text,in address_line_2 text)
begin
    insert into driver (driver_name,NIC,address_line1,address_line2) values (name,nicNO,address_line_1,address_line_2);
end //
delimiter ;


delimiter //
create procedure AddDriverAssistant(in name varchar(50), in nicNO varchar(15),in address_line_1 text,in address_line_2 text)
begin
    insert into driver_assistant (driver_assistant_name,NIC,address_line1,address_line2) values (name,nicNO,address_line_1,address_line_2);
end //
delimiter ;


delimiter //
create procedure AddTrainSession(in trainID int,in departureTime time,in departureDate date,in availableCapacity decimal(5,2))
begin
    insert into train_schedule (train_id,departure_time,departure_date,available_capacity) values (trainID,departureTime,departureDate,availableCapacity);
end //
delimiter ;

delimiter //
create procedure AddTrain(in trainID int,in capacity decimal(5,2))
begin
    insert into train (train_id,train_capacity) values (trainID,capacity);
end //
delimiter ;


delimiter //
create procedure AddRoute(in routeID int,in storeName varchar(30),in timeTaken decimal(3,2))
begin
    insert into route (route_id,store_name,time_taken) values (routeID,storeName,timeTaken);
end //
delimiter ;


delimiter //
create procedure AddTruck(in truckID int,in truk_capacity decimal(5,2) ,in hours decimal(8,2))
begin
    insert into truck (truck_id,truck_capacity,used_hours) values (truckID,truk_capacity,hours);
end //
delimiter ;


delimiter //
create procedure AddStore(in storeName varchar(30),in address_line_1 text,in address_line_2 text)
begin
    insert into store (store_name,address_line1,address_line2) values (store_name,address_line_1,address_line_2);
end //
delimiter ;


delimiter //
CREATE PROCEDURE insertArrivalStation(in train_sessionId int ,in station varchar(30),in arrivalTime time)
begin
    insert into arrival_station (train_session_id,arrival_station,arrival_time) values  (train_sessionId,station,arrivalTime);
End //
delimiter ;


Delimiter //
create procedure AvailableTrains(in orderID int)
begin
    declare routeID int;
    declare OrderDate date;
    declare TotalCapacity decimal(5,2);
    declare dateToDeliver date;
    declare StoreName varchar(30);

    select route_id into routeID from order_table where order_id=orderID;
    select order_date into OrderDate from order_table where order_id=orderID;
    select total_capacity into TotalCapacity from order_table where order_id=orderID;
    select store_name into StoreName from route where route_id =routeID;
    SELECT DATE_ADD(OrderDate, INTERVAL 7 DAY) into dateToDeliver;

    select train_session_id  from train_schedule natural join arrival_station where  train_schedule.available_capacity > TotalCapacity and train_schedule.departure_date >= dateToDeliver and arrival_station.arrival_station=StoreName;
end //
delimiter ;


DELIMITER //
create procedure AddTruckSession(in truckSessionId int, in truckId int, in driverId int, in driverAssistantId int, in routeId int, in departureDate date, in departureTime time, in arrivalDate date, in arrivalTime time)
begin
    insert into truck_schedule (truck_session_id, truck_id, driver_id, driver_assistant_id, route_id, departure_date, departure_time, arrival_date, arrival_time)
    values (truckSessionId, truckId, driverId, driverAssistantId, routeId, departureDate, departureTime, arrivalDate, arrivalTime);
end //
DELIMITER ;


DELIMITER //
create procedure AssignOrderToTruckSession(in orderId int, in truckSessionId int)
begin
    insert into truck_schedule (order_id, truck_session_id) values (orderId, truckSessionId);
end //
DELIMITER ;
